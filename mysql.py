#!/usr/bin/env python
# encoding: utf-8
"""
@author:     
@date:        年 月 日
@description:   modify by idhyt
Usage:
    cloud_db = ('127.0.0.1', 'username', 'password', 'db_name')
    sql = MySQL( *cloud_db )
    sql.....
"""

import MySQLdb
from common.logger.Logger import Logger
from time import sleep

SLEEP_TIME = 5


def output_error_log(error_string):
    Logger.Write.output_log(error_string)


class MySQL():
    def __init__(self, host, user, psd, db, port=3306):
        self.host = host
        self.user = user
        self.psd = psd
        self.db = db
        self.port = port
        self.db_msg = 'host:%s, user:%s, psd:%s, db:%s, port:%s' % (host, user, psd, db, port)
        self._connect()
        
    def __del__(self):
        self.close()
        
    def _connect(self):
        con_count = 0
        while con_count < 5:
            try:
                self.conn = MySQLdb.Connect(self.host, self.user, self.psd,
                                            self.db, self.port, charset='utf8')
                self.cur = self.conn.cursor()
                self.cur.execute('set names utf8')
                break            
            except Exception, e:
                error_string = '(%s) connect fail, error: %s' % (self.db_msg, e)
                output_error_log(error_string)
                sleep(SLEEP_TIME)
            con_count += 1
    
    def get_value(self, sql_string, arg_list=None):
        con_count = 0
        result = None
        while con_count < 5:
            try:
                self.conn.commit()
                if arg_list is None:
                    self.cur.execute(sql_string)
                else:
                    self.cur.execute(sql_string, arg_list)
                    
                result = self.cur.fetchone()
                break
            except Exception, e:
                if arg_list is None:
                    error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                    output_error_log(error_string)
                else:
                    error_string = '(%s) execute fail, arg_list: %s error: %s' % (sql_string, arg_list, e)
                    output_error_log(error_string)
                    
                if e[0] == 1062:
                    break
                sleep(SLEEP_TIME)
                self.close()
                self._connect()
            con_count += 1
        return result

    def get_values(self, sql_string, arg_list=None):
        con_count = 0
        result = None
        while con_count < 5:
            try:
                self.conn.commit()
                if arg_list is None:
                    self.cur.execute(sql_string)
                else:
                    self.cur.execute(sql_string, arg_list)
                result = self.cur.fetchall()
                break
            except Exception, e:
                if arg_list is None:
                    error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                    output_error_log(error_string)
                else:
                    error_string = '(%s) execute fail, arg_list: %s error: %s' % (sql_string, arg_list, e)
                    output_error_log(error_string)
                
                if e[0] == 1062:
                    break
                sleep(SLEEP_TIME)
                self.close()
                self._connect()
            con_count += 1
        return result
        
    def insert_value(self, sql_string, arg_list=None):
        con_count = 0
        while con_count < 5:
            try:
                if arg_list is None:
                    self.cur.execute(sql_string)
                else:
                    self.cur.execute(sql_string, arg_list)
                self.conn.commit()
                break
            except MySQLdb.IntegrityError, e:
                if arg_list is None:
                    error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                    output_error_log(error_string)
                else:
                    error_string = '(%s) execute fail, arg_list: %s error: %s' % (sql_string, arg_list, e)
                    output_error_log(error_string)
                
                if e.args[0] == 1062:
                    break
                else:
                    sleep(SLEEP_TIME)
                    self.close()
                    self._connect()
            except MySQLdb.OperationalError, e:
                if arg_list is None:
                    error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                    output_error_log(error_string)
                else:
                    error_string = '(%s) execute fail, arg_list: %s error: %s' % (sql_string, arg_list, e)
                    output_error_log(error_string)
                
                # ---- fix encode error ---- #
                if e[0] == 1366:
                    sql_string = sql_string.decode('gbk', 'ignore')
                # ---- end --------- #

                if e.args[0] == 1050:
                    break
                else:
                    sleep(SLEEP_TIME)
                    self.close()
                    self._connect()
            except Exception, e:
                error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                output_error_log(error_string)
                sleep(SLEEP_TIME)
                self.close()
                self._connect()
            con_count += 1
            
    # insert but do don't commit
    def insert_value_not_commit(self, sql_string, arg_list=None):
        con_count = 0
        while con_count < 5:
            try:
                if arg_list is None:
                    self.cur.execute(sql_string)
                else:
                    self.cur.execute(sql_string, arg_list)
                break
            except MySQLdb.IntegrityError, e:
                if arg_list is None:
                    error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                    output_error_log(error_string)
                else:
                    error_string = '(%s) execute fail, arg_list: %s error: %s' % (sql_string, arg_list, e)
                    output_error_log(error_string)
                
                if e.args[0] == 1062:
                    break
                else:
                    sleep(SLEEP_TIME)
                    self.close()
                    self._connect()
            except MySQLdb.OperationalError, e:
                if arg_list is None:
                    error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                    output_error_log(error_string)
                else:
                    error_string = '(%s) execute fail, arg_list: %s error: %s' % (sql_string, arg_list, e)
                    output_error_log(error_string)

                # ---- fix encode error ---- #
                if e[0] == 1366:
                    sql_string = sql_string.decode('gbk', 'ignore')
                # ---- end --------- #

                if e.args[0] == 1050:
                    break
                else:
                    sleep(SLEEP_TIME)
                    self.close()
                    self._connect()
            except Exception, e:
                error_string = '(%s) execute fail, error: %s' % (sql_string, e)
                output_error_log(error_string)
                sleep(SLEEP_TIME)
                self.close()
                self._connect()
            con_count += 1

    def commit(self):   
        try:
            self.conn.commit()     
        except Exception, e:
            output_error_log(str(e))
            return False
        return True 
      
    def close(self):
        try:
            self.cur.close()
            self.conn.close()
        except Exception, e:
            output_error_log(str(e))
            return False