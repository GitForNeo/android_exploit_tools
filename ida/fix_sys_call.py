#!/usr/bin/env python
# encoding: utf-8
"""
@author:     idhyt@hotmail.com
@date:
@description:
            arm: svc 0
"""

from idc import *
import re


unistd_file_path = "D:\work\code\python\script\unistd.h"

BYTE_SIZE = 4

sys_call_maps = {
    "sys_call_id": "sys_call_name"
}


def format_sys_call_number(file_name):
    regex = r"(__NR_\w{1,}).+\+\s*(\d{1,3})"
    pattern = re.compile(regex, re.IGNORECASE)

    with open(file_name, "r") as f:
        sys_call_lines = f.readlines()

    for sys_call in sys_call_lines:
        result = pattern.findall(sys_call)
        if len(result) > 0:
            sys_call_maps.setdefault(result[0][1], result[0][0])
            # print "%s %s" % (result[0][1], result[0][0])
    f.close()


def fix_sys_call(start_address, end_address, sys_call_codes, id_offset):
    i = 0
    sys_call_codes_len = len(sys_call_codes)
    print sys_call_codes_len

    for x in xrange(end_address - start_address):
        code = GetDisasm(start_address + x * BYTE_SIZE)
        if i < sys_call_codes_len and sys_call_codes[i] in code:
            i += 1
            # print code
            continue

        # print i
        if i == sys_call_codes_len:
            i = 0
            print "find"
            print x
            code = GetDisasm(start_address + (x-id_offset) * BYTE_SIZE)     # 3 begin -> id
            if "#" in code:
                sys_call_id = long(code.split("#")[-1].rstrip(), 16)
            elif "=" in code:
                sys_call_id = long(code.split("=")[-1].rstrip(), 16)
            sys_call_name = sys_call_maps.get(str(sys_call_id), "_".join(["unknow", str(sys_call_id)]))
            print "%d %s %s" % (sys_call_id, sys_call_name, code)
            MakeName(start_address + (x-sys_call_codes_len) * BYTE_SIZE, sys_call_name)
        else:
            i = 0


def fix_1():
    sys_call_codes = [
        "STMFD   SP!, {R4,R7}",
        "R7,",    # "MOV     R7, #0xC9"
        "SVC     0",
        "LDMFD   SP!, {R4,R7}",
    ]
    fix_sys_call(start, end, sys_call_codes, 3)


def fix_2():

    sys_call_codes = [
        "R12, SP",
        "STMFD   SP!, {R4-R7}",
        "LDMIA   R12, {R4-R6}",
        "R7,",    # "MOV     R7, #0xC9"
        "SVC     0",
        "LDMFD   SP!, {R4-R7}",
    ]
    fix_sys_call(start, end, sys_call_codes, 3)

if not unistd_file_path:
    unistd_file_path = AskFile(0, "*.h", "Select unistd.h file")

start, end = 0x12D70, 0x13090

format_sys_call_number(unistd_file_path)

fix_1()
fix_2()


